
--==-- ItemLinksDB3 Functionality Description --==--

Addon type: Library
Libraries used:
	ChatLinksMonitor2
	EventsManager2

This library addon is an item links database. It maintains just enough information to recreate item links:
their ID, their rarity, and their name. It is meant to be used as a library for other addons which need
this information to provide useful functionality. It loads a base database from the DefaultDatabase file
corresponding to the current locale, and then stores any new or different entries in an errata table
which is saved between sessions.

It is possible to automatically import links from the saved variables file of Saeris's LootLink, Telo's
LootLink, or the previous version of this addon, ItemDB_Links2. To do so, simply place the saved
variables file ("LootLink.lua" or "Lib-ItemDB_Links2_SavedVariables.lua") from your <WoW>/WTF/
Account/<account name>/SavedVariables directory into the Lib-ItemLinksDB3_SavedVariables folder,
load the game once, and then delete the file.


Here is the API, for developers:

In the following descriptions, these terms are defined:
	itemID - A key from the database. A simple positive integer.
	data - A value from the database.

Note that along with maintaining the database, the library also does some rudimentary monitoring of
chat messages for links. This is the only specific source of links it will monitor, because it is the only
source which can produce links which aren't automatically added to the client's cache (and therefore
accessible from GetItemInfo()). The library won't cache these links automatically, but it will extract all
the information it needs to add the item to the database from the chat link alone. Links from all other
sources can be forcibly added to the database by brute-force searching GetItemInfo(), via
ItemLinksDB3.CombGetItemInfo().


size = ItemLinksDB3.GetDBSize()
	Returns the size of the database.

iterator, state, start = ItemLinksDB3.IterateDB(keysOnly, sortedByName)
	Returns components to iterate over the active database using a "for k, v in iterator, state, start do"
	style of loop. If keysOnly is true, then only the itemID, not the data, will be available for iteration,
	although the iterator will still give a nil value for the second return. This is considerably faster and
	should be used if you do not need the data. If sortedByName is true, the iteration will be sorted
	by name. This is generally much faster than sorting the iterated values yourself, but it does,
	of course, take longer than the unsorted iteration.

numNew, numUpdated = ItemLinksDB3.CombGetItemInfo(onlyNew)
	Brute-force searches through all possible itemIDs by checking GetItemInfo(), which searches the
	local itemcache.wdb file. The revealed data is then added to the database. This function won't
	disconnect the client, and is actually run once automatically when the library loads. If onlyNew
	is true, the search will only add data, not update it; this is faster.

link = ItemLinksDB3.BuildLink(itemID[, level])
	Builds a link (usable with tooltip:SetHyperlink()) from the given itemID and optional player level.
	The level is used for items which have stats that vary by the level of the equipper.

chatlink = ItemLinksDB3.BuildChatlink(itemID[, data][, level])
	Builds a chatlink (usable in chat or tooltip:SetHyperlink()) from the given itemID and optional player
	level. The level is used for items which have stats that vary by the level of the equipper. If the data
	argument is non-nil, that information is used instead of a database lookup by itemID.

matcher = ItemLinksDB3.CreateMatcher([name][, rarity])
	Creates a specially formatted value which can be used with ItemLinksDB3.IsDataMatch() to determine
	whether a given entry in the database is a match. The input name and rarity should be patterns if
	they are not nil. Using this process for searching the database ensures good performance.

isMatch = ItemLinksDB3.IsDataMatch(data, matcher)
	Given a matcher from ItemLinksDB3.CreateMatcher(), determines whether the given data matches.
	Returns non-nil for a match, or nil for a mismatch.

sorter, identicalTo = ItemLinksDB3.CreateNameSorter([indexingKey][, reverse][, skipEquals][, accessDB])
	Creates a function that can be used with a sorting algorithm to sort by name an array subset of the
	database. If indexingKey is not nil, the function will assume the values given to the sorting function
	are tables and must be indexed with indexingKey to access the ItemLinksDB3 data for comparison.
	If reverse is true, the comparison order will be reversed. If skipEquals is true, < or > will be used instead
	of <= or >= (depending on whether reverse is true or not). If accessDB is true, the sorter will assume
	that the values it accesses are actually keys from the database rather than the data itself, and it
	will do the necessary database lookups to get the data. If the identicalTo value is not nil, it is a
	string saying which basic comparator the sorter is identical to (after indexingKey is accounted for),
	either "<", ">", "<=", or ">=".

sorter, identicalTo = ItemLinksDB3.CreateRaritySorter([indexingKey][, reverse][, skipEquals][, accessDB])
	Creates a function that can be used with a sorting algorithm to sort by rarity an array subset of the
	database. If indexingKey is not nil, the function will assume the values given to the sorting function
	are tables and must be indexed with indexingKey to access the ItemLinksDB3 data for comparison.
	If reverse is true, the comparison order will be reversed. If skipEquals is true, < or > will be used instead
	of <= or >= (depending on whether reverse is true or not). If accessDB is true, the sorter will assume
	that the values it accesses are actually keys from the database rather than the data itself, and it
	will do the necessary database lookups to get the data. If the identicalTo value is not nil, it is a
	string saying which basic comparator the sorter is identical to (after indexingKey is accounted for),
	either "<", ">", "<=", or ">=".


data = ItemLinksDB3.GetData(itemID)
	Returns the data (value) corresponding to the itemID (key) in the database.

name, rarity = ItemLinksDB3.SplitData(data)
	Splits name and rarity from data and returns them.

name = ItemLinksDB3.GetName(itemID)
	Returns the name associated with the itemID in the database.

rarity = ItemLinksDB3.GetRarity(itemID)
	Returns the rarity associated with the itemID in the database.
	
oldData, newData = ItemLinksDB3.SetData(itemID, newName, newRarity)
	Sets the database's data for itemID to the combination of newName and newRarity. If this new data
	differs from that in the database at the time, it is stored in the errata table.


excluded = ItemLinksDB3.GetRarityExcluded(rarity)
	Given a numeric rarity level (0 to 7), returns whether that rarity is excluded from the
	database.
	
ItemLinksDB3.SetRarityExcluded(rarity, isExcluded)
	Changes the exclusion status for the given rarity level to isExcluded (a true or false
	value). This has no immediate effect on the database. The UI must be reloaded for existing entries
	in the database to be added or removed based on the new rarity exclusion setting. However, new
	entries in the database will obey the new setting.


minor, subminor = ItemLinksDB3.GetVersion()
	Returns the minor and subminor components of the currently running version of the addon. This is
	the 2 and 3, respectively, of a number like 1.2.3. This is useful if you are depending on the non-embedded
	version of the library.



The library registers some custom events with EventsManager2 which can be used to monitor for new
or updated data:
	ItemLinksDB3_DB_SIZE_CHANGED
		Args:
			1 - The old database size, 0 the first time this fires.
			2 - The new database size.
		Triggers any time an item is added to or removed from the database. Of note is that this
		fires BEFORE the update events for name/rarity (except for the first time), so the very next one
		of those will correspond to whatever item was added or removed.
	ItemLinksDB3_ITEM_NAME_CHANGED
		Args:
			1 - itemID
			2 - Old name, potentially nil.
			3 - New name, potentially nil.
		Fires when an item's name changes. The old name will be nil if the item was not in the database.
		The new name will be nil if the item is being removed from the database.
	ItemLinksDB3_ITEM_RARITY_CHANGED
		Args:
			1 - itemID
			2 - Old rarity (integer 0-7), potentially nil.
			3 - New rarity (integer 0-7), potentially nil.
		Fires when an item's rarity changes. The old rarity will be nil if the item was not in the database.
		The new rarity will be nil if the item is being removed from the database.


To embed the library into your addon, place the Lib-ItemLinksDB3 directory into your addon's directory.
Then, add the line PATH\ItemLinksDB3_Loader.xml at the top of the file list in your .toc file, such as
Lib-ItemLinksDB3\ItemLinksDB3_Loader.xml. Ensure that all of the required libraries load prior to this.

To run the library non-embedded, require it by listing it in the RequiredDeps line of your .toc file. Then, tell
users to ensure that they always have the latest version installed. To check the running version from your
addon, call the API function ItemLinksDB3.GetVersion().

Either embedded or non-embedded, the saved variables stub should be present in order for errata and
rarity exclusions to be saved. This stub acts just like a normal load-on-demand addon. Your addon does
not need to list it at a dependency.
