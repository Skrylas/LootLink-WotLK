
--==-- QuestLinksDB2 Functionality Description --==--

Addon type: Library
Libraries used:
	ChatLinksMonitor2
	EventsManager2

This library addon is a quest links database. It maintains just enough information to recreate quest
links: their ID, name, and level. It is meant to be used as a library for other addons which need this
information to provide useful functionality. It loads a base database from the DefaultDatabase file
corresponding to the current locale, and then stores any new or different entries in an errata table
which is saved between sessions.


Here is the API, for developers:

In the following descriptions, these terms are defined:
	questID - A key from the database. A simple positive integer.
	data - A value from the database.

Note that along with maintaining the database, the library also does some rudimentary monitoring of
chat messages and the quest log for links.


size = QuestLinksDB2.GetDBSize()
	Returns the size of the database.

iterator, state, start = QuestLinksDB2.IterateDB(keysOnly, sortedByName)
	Returns components to iterate over the active database using a "for k, v in iterator, state, start do"
	style of loop. If keysOnly is true, then only the questID, not the data, will be available for iteration,
	although the iterator will still give a nil value for the second return. This is considerably faster and
	should be used if you do not need the data. If sortedByName is true, the iteration will be sorted
	by name. This is generally much faster than sorting the iterated values yourself, but it does,
	of course, take longer than the unsorted iteration.

link = QuestLinksDB2.BuildLink(questID)
	Builds a link (usable with tooltip:SetHyperlink()) from the given questID.

chatlink = QuestLinksDB2.BuildChatlink(questID[, data])
	Builds a chatlink (usable in chat or tooltip:SetHyperlink()) from the given questID. If the data argument is
	non-nil, that information is used instead of a database lookup by questID.

matcher = QuestLinksDB2.CreateMatcher([name][, minLevel][, maxLevel])
	Creates a specially formatted value which can be used with QuestLinksDB2.IsDataMatch() to determine
	whether a given entry in the database is a match to the given arguments. The input name should be a
	pattern if it is not nil. Using this process for searching the database ensures good performance.

isMatch = QuestLinksDB2.IsDataMatch(data, matcher)
	Given a matcher from QuestLinksDB2.CreateMatcher(), determines whether the given data matches.
	Returns non-nil for a match, or nil for a mismatch.

sorter, identicalTo = QuestLinksDB2.CreateNameSorter([indexingKey][, skipEquals][, accessDB])
	Creates a function that can be used with a sorting algorithm to sort by name an array subset of the
	database. If indexingKey is not nil, the function will assume the values given to the sorting function
	are tables and must be indexed with indexingKey to access the QuestLinksDB2 data for comparison.
	If reverse is true, the comparison order will be reversed. If skipEquals is true, < or > will be used instead
	of <= or >= (depending on whether reverse is true or not). If accessDB is true, the sorter will assume
	that the values it accesses are actually keys from the database rather than the data itself, and it
	will do the necessary database lookups to get the data. If the identicalTo value is not nil, it is a
	string saying which basic comparator the sorter is identical to (after indexingKey is accounted for),
	either "<", ">", "<=", or ">=".

sorter, identicalTo = QuestLinksDB2.CreateLevelSorter([indexingKey][, reverse][, skipEquals][, accessDB])
	Creates a function that can be used with a sorting algorithm to sort by level an array subset of the
	database. If indexingKey is not nil, the function will assume the values given to the sorting function
	are tables and must be indexed with indexingKey to access the QuestLinksDB2 data for comparison.
	If reverse is true, the comparison order will be reversed. If skipEquals is true, < or > will be used instead
	of <= or >= (depending on whether reverse is true or not). If accessDB is true, the sorter will assume
	that the values it accesses are actually keys from the database rather than the data itself, and it
	will do the necessary database lookups to get the data. If the identicalTo value is not nil, it is a
	string saying which basic comparator the sorter is identical to (after indexingKey is accounted for),
	either "<", ">", "<=", or ">=".


data = QuestLinksDB2.GetData(questID)
	Returns the data (value) corresponding to the questID (key) in the database.

name, level = QuestLinksDB2.SplitData(data)
	Splits name and level from data and returns them.

name = QuestLinksDB2.GetName(questID)
	Returns the name associated with the questID in the database.

level = QuestLinksDB2.GetLevel(questID)
	Returns the rarity associated with the questID in the database.
	
oldData, newData = QuestLinksDB2.SetData(questID, newName)
	Sets the database's data for tsID to the newName. If this new data differs from that in the database
	at the time, it is stored in the errata table.


minor, subminor = QuestLinksDB2.GetVersion()
	Returns the minor and subminor components of the currently running version of the addon. This is
	the 2 and 3, respectively, of a number like 1.2.3. This is useful if you are depending on the non-embedded
	version of the library.



The library registers some custom events with EventsManager2 which can be used to monitor for new
or updated data:
	QuestLinksDB2_DB_SIZE_CHANGED
		Args:
			1 - The old database size, 0 the first time this fires.
			2 - The new database size.
		Triggers any time a quest is added to or removed from the database. Of note is that this
		fires BEFORE the update events for name and level (except for the first time), so the very
		next one of those will correspond to whatever quest was added or removed.
	QuestLinksDB2_QUEST_NAME_CHANGED
		Args:
			1 - questID
			2 - Old name, potentially nil.
			3 - New name, potentially nil.
		Fires when a quest's name changes. The old name will be nil if the quest was not in the database.
		The new name will be nil if the quest is being removed from the database.
	QuestLinksDB2_QUEST_LEVEL_CHANGED
		Args:
			1 - questID
			2 - Old level, potentially nil.
			3 - New level, potentially nil.
		Fires when a quest's level changes. The old rarity will be nil if the quest was not in the database.
		The new rarity will be nil if the quest is being removed from the database.


To embed the library into your addon, place the Lib-QuestLinksDB2 directory into your addon's directory.
Then, add the line PATH\QuestLinksDB2_Loader.xml at the top of the file list in your .toc file, such as
Lib-QuestLinksDB2\QuestLinksDB2_Loader.xml. Ensure that all of the required libraries load prior to this.

To run the library non-embedded, require it by listing it in the RequiredDeps line of your .toc file. Then, tell
users to ensure that they always have the latest version installed. To check the running version from your
addon, call the API function QuestLinksDB2.GetVersion().

Either embedded or non-embedded, the saved variables stub should be present in order for errata and
rarity exclusions to be saved. This stub acts just like a normal load-on-demand addon. Your addon does
not need to list it at a dependency.
