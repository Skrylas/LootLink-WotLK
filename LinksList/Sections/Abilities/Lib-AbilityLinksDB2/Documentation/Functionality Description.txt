
--==-- AbilityLinksDB2 Functionality Description --==--

Addon type: Library
Libraries used:
	EventsManager2

This library addon is an ability links database. It maintains just enough information to recreate ability
links: their ID and their name. It is meant to be used as a library for other addons which need this
information to provide useful functionality. It loads a base database from the DefaultDatabase file
corresponding to the current locale, and then stores any new or different entries in an errata table
which is saved between sessions.


Here is the API, for developers:

In the following descriptions, these terms are defined:
	abilityID - A key from the database. A simple positive integer.
	data - A value from the database. This can be used interchangeably with the name of the link.


size = AbilityLinksDB2.GetDBSize()
	Returns the size of the database.

iterator, state, start = AbilityLinksDB2.IterateDB(keysOnly, sortedByName)
	Returns components to iterate over the active database using a "for k, v in iterator, state, start do"
	style of loop. If keysOnly is true, then only the abilityID, not the data, will be available for iteration,
	although the iterator will still give a nil value for the second return. This is considerably faster and
	should be used if you do not need the data. If sortedByName is true, the iteration will be sorted
	by name. This is generally much faster than sorting the iterated values yourself, but it does,
	of course, take longer than the unsorted iteration.

numNew, numUpdated = AbilityLinksDB2.CombGetSpellLink(onlyNew)
	Brute-force searches through all possible abilityIDs by checking GetSpellLink(), which searches the
	local cache file. The revealed data is then added to the database. This function won't disconnect the
	client, and is actually run once automatically when the library loads. If onlyNew is true, the search
	will only add data, not update it; this is faster.

link = AbilityLinksDB2.BuildLink(abilityID)
	Builds a link (usable with tooltip:SetHyperlink()) from the given abilityID.

chatlink = AbilityLinksDB2.BuildChatlink(abilityID[, data])
	Builds a chatlink (usable in chat or tooltip:SetHyperlink()) from the given abilityID. If the data
	argument is non-nil, that information is used instead of a database lookup by abilityID.

matcher = AbilityLinksDB2.CreateMatcher(text)
	Creates a specially formatted value which can be used with AbilityLinksDB2.IsDataMatch() to determine
	whether a given entry in the database is a match. The input text should be a pattern if it is not nil.
	Using this process for searching the database ensures good performance.

isMatch = AbilityLinksDB2.IsDataMatch(data, matcher)
	Given a matcher from AbilityLinksDB2.CreateMatcher(), determines whether the given data matches.
	Returns non-nil for a match, or nil for a mismatch.

sorter, identicalTo = AbilityLinksDB2.CreateSorter([indexingKey][, reverse][, skipEquals][, accessDB])
	Creates a function that can be used with a sorting algorithm to sort an array subset of the database.
	If indexingKey is not nil, the function will assume the values given to the sorting function are tables
	and must be indexed with indexingKey to access the AbilityLinksDB2 data for comparison. If reverse
	is true, the comparison order will be reversed. If skipEquals is true, < or > will be used instead of
	<= or >= (depending on whether reverse is true or not). If accessDB is true, the sorter will assume
	that the values it accesses are actually keys from the database rather than the data itself, and it
	will do the necessary database lookups to get the data. If the identicalTo value is not nil, it is a
	string saying which basic comparator the sorter is identical to (after indexingKey is accounted for),
	either "<", ">", "<=", or ">=".


data = AbilityLinksDB2.GetData(abilityID)
	Returns the data (value) corresponding to the abilityID (key) in the database.
	
oldData, newData = AbilityLinksDB2.SetData(abilityID, newName)
	Sets the database's data for abilityID to the newName.


minor, subminor = AbilityLinksDB2.GetVersion()
	Returns the minor and subminor components of the currently running version of the addon. This is
	the 2 and 3, respectively, of a number like 1.2.3. This is useful if you are depending on the non-embedded
	version of the library.



The library registers some custom events with EventsManager2 which can be used to monitor for new
or updated data:
	AbilityLinksDB2_DB_SIZE_CHANGED
		Args:
			1 - The old database size, 0 the first time this fires.
			2 - The new database size.
		Triggers any time an ability is added to or removed from the database. Of note is that this
		fires BEFORE the update event for name (except for the first time), so the very next one of
		those will correspond to whatever ability was added or removed.
	AbilityLinksDB2_ABILITY_NAME_CHANGED
		Args:
			1 - abilityID
			2 - Old name, potentially nil.
			3 - New name, potentially nil.
		Fires when an ability's name changes. The old name will be nil if the ability was not in the database.
		The new name will be nil if the ability is being removed from the database.


To embed the library into your addon, place the Lib-AbilityLinksDB2 directory into your addon's directory.
Then, add the line PATH\AbilityLinksDB2_Loader.xml at the top of the file list in your .toc file, such as
Lib-AbilityLinksDB2\AbilityLinksDB2_Loader.xml. Ensure that all of the required libraries load prior to this.

To run the library non-embedded, require it by listing it in the RequiredDeps line of your .toc file. Then, tell
users to ensure that they always have the latest version installed. To check the running version from your
addon, call the API function AbilityLinksDB2.GetVersion().
